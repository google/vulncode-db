# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Tests for app/vulnerability.py."""
import datetime
import unittest
import app.vulnerability.views.vulnerability as vuln
import mock

from tests.test_base import FlaskTest
from data.models import Vulnerability, VulnerabilityGitCommits, Nvd


class VulnerabilityDataTest(FlaskTest):
    def generate_testdata(self):
        def generate_commit_data():
            return VulnerabilityGitCommits(
                commit_link='https://github.com/0WN3R/REP0',
                commit_hash='F00D',
                repo_name='REP0',
                repo_owner='0WN3R',
            )

        self.vuln1 = Vulnerability(cve_id='CVE-1337',
                                   commits=[generate_commit_data()],
                                   comment="Test comment.",
                                   date_created=datetime.date.today())
        self.nvd1 = Nvd(cve_id='CVE-1337', published_date=datetime.date.today(), descriptions=[])
        self.vuln2 = Vulnerability(
            cve_id='CVE-1339',
            commits=[generate_commit_data()],
            date_created=datetime.date.today(),
            comment="Test comment2.",
        )

        self.vulns = [self.vuln1, self.vuln2]

        self.vuln_view1 = vuln.VulnerabilityView(self.vuln1, self.nvd1, preview=True)
        self.vuln_view2 = vuln.VulnerabilityView(self.vuln1, None, preview=True)
        self.vuln_view3 = vuln.VulnerabilityView(None, self.nvd1, preview=True)

    def setUp(self):
        super(VulnerabilityDataTest, self).setUp()
        self.generate_testdata()
        # db.session.add_all(self.vulns)
        # db.session.commit()

    def tearDown(self):
        # for vuln in self.vulns:
        #     db.session.delete(vuln)
        # db.session.commit()
        super(VulnerabilityDataTest, self).tearDown()


class TestVulnerbility(VulnerabilityDataTest):
    @mock.patch('data.models.Vulnerability.get_by_commit_hash')
    @mock.patch('data.models.Vulnerability.get_by_cve_id')
    def test_getVulnerability(self, get_by_cve_id_mock, get_by_commit_hash_mock):
        get_by_cve_id_mock.side_effect = [self.vuln1]
        actual_vuln = vuln.getVulnerability({"cve_id": 'CVE-1337'})
        get_by_cve_id_mock.assert_called_once_with('CVE-1337')
        self.assertEqual(actual_vuln, self.vuln1)

        get_by_commit_hash_mock.side_effect = [self.vuln1]
        actual_vuln = vuln.getVulnerability({"commit_hash": 'F00D'})
        get_by_commit_hash_mock.assert_called_once_with('F00D')
        self.assertEqual(actual_vuln, self.vuln1)


class VulnerabilityViewTests(VulnerabilityDataTest):
    @classmethod
    def setUpClass(self):
        super(VulnerabilityViewTests, self).setUpClass()

    def setUp(self):
        super(VulnerabilityViewTests, self).setUp()
        self.dummy_vuln_view = vuln.VulnerabilityView(None, None, preview=False)

    def test_read_data_from_vulnerability(self):
        self.dummy_vuln_view.read_data_from_vulnerability(self.vuln1)
        self.assertEqual(self.dummy_vuln_view.id, self.vuln1.id)

    def test_read_data_from_nvd(self):
        self.dummy_vuln_view.read_data_from_nvd(self.nvd1)
        self.assertEqual(self.dummy_vuln_view.id, self.nvd1.cve_id)


if __name__ == '__main__':
    unittest.main()
